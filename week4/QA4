Grade: 80%

Q1:
Suppose that we have a neuron which, in a given time period, will fire with probability 0.1, yielding a Bernoulli distribution for the neuron's firing (denoted by the random variable F = 0 or 1) with P(F = 1) = 0.1.

Which of these is closest to the entropy H(F) of this distribution (calculated in bits, i.e., using the base 2 logarithm)?

A:
H[F] = -sum(pi*log2(pi))
H[F] = 0.468995 = 0.4690

_______________________________________________________________________________
Q2:
Continued from Question 1:

Now lets add a stimulus to the picture. Suppose that we think this neuron's activity is related to a light flashing in the eye. Let us say that the light is flashing in a given time period with probability 0.10. Call this stimulus random variable S.

If there is a flash, the neuron will fire with probability 1/2. If there is not a flash, the neuron will fire with probability 1/18. Call this random variable F (whether the neuron fires or not).

Which of these is closest, in bits (log base 2 units), to the mutual information MI(S,F)?

A:
0.09...


_______________________________________________________________________________

Q3:

This math from lecture 4.3 could potentially be intimidating, but in fact the concept is really simple. Getting an intuition for it will help with many types of problems. Let's work out a metaphor to understand it.

Suppose we want to build a complex image. We could do that by layering a whole bunch of pieces together (mathematically - summing). This is like drawing on transparencies with various levels of opacity and putting them on top of each other. Those familiar with Photoshop or Gimp will recognize that concept. If we had to build an image in Photoshop with a bicycle on a road, for instance, perhaps we could have an image of a sky, and one of the road, and one of the bike. We could "add" these pieces together to make our target image.

Of course, if our neural system was trying to make visual fields that worked for any sort of input, we would want more than just roads, skies, and bikes to work with! One possibility is to have a bunch of generic shapes of various sizes, orientations, and locations within the image. If we chose the right variety, we could blend/sum these primitive pieces together to make just about any image! One way to blend them is to let them have varying transparencies/opacities, and to set them on top of each other. That is what we would call a weighted sum, where the weights are how transparent each piece is.

Of course, we may not want to have too many possible shapes to use. As mentioned in the video, the organism likely wants to conserve energy. That means having as few neurons firing as possible at once. If we conceptually make a correlation between these shapes and the neurons, then we can point out we would want to use as few shapes as we could while maintaining an accurate image.

This math gives us a way of summing a bunch of pieces together to represent an image, to attempt to make that representation look as much like the image as possible, and to make that representation efficient - using as few pieces as possible. That is a lot of work for two lines of math!

Now let's put this metaphor into action to understand what all these symbols mean. I'll give you one to start with. The vector x in the equation above represents the coordinates of a point in the image. Now you fill in the rest:

What do the ϕis, called the "basis functions," represent in our metaphor?

A: pieces that make up the image

_______________________________________________________________________________

Q4:
what does e represent?
A: difference between actual image and representation

_______________________________________________________________________________

Q5:
what do the ai's represent?
A: the level of transparency vs opacity/influence of each piece

_______________________________________________________________________________

Q6:
what does lambda represent?
A: the importance of coding efficiency. it's job is to penalize functions with too many basis functions that lead to inefficiency.

_______________________________________________________________________________

Q7:
download data (tuning.mat). plot tuning curve (mean firing rate of neuron as function of stimulus)
which of the following functions best describes the tuning curve?
A: half wave rectified cosine, as evidenced by the cos wave followed by a section of 0, followed by another cos wave

_______________________________________________________________________________

Q8:
Continued from Question 7:

We have reason to suspect that one of the neurons is not like the others. Three of the neurons are Poisson neurons (they are accurately modeling using a Poisson process), but we believe that the remaining one might not be.

Which of the neurons (if any) is NOT Poisson?

A: neuron 3

_______________________________________________________________________________

Q9:
Continued from Question 7:

Finally, we ran an additional set of experiments in which we exposed each of the neurons to a single stimulus of unknown direction for 10 trials of 10 seconds each

Continued from Question 7:

Finally, we ran an additional set of experiments in which we exposed each of the neurons to a single stimulus of unknown direction for 10 trials of 10 seconds each.

pop_coding contains four vectors named r1, r2, r3, and r4 that contain the responses (firing rate in Hz) of the four neurons to this mystery stimulus. It also contains four vectors named c1, c2, c3, and c4. These are the basis vectors corresponding to neuron 1, neuron 2, neuron 3, and neuron 4.

Decode the neural responses and recover the mystery stimulus vector by computing the population vector for these neurons. You should use the maximum average firing rate (over any of the stimulus values in 'tuning.mat') for a neuron as the value of rmax for that neuron. That is, rmax should be the maximum value in the tuning curve for that neuron.

What is the direction, in degrees, of the population vector? You should round your answer to the nearest degree. Your answer should contain the value only (no units!) and should be between 0∘ and 360∘. If your calculations give a negative number or a number greater than or equal to 360, convert it to a number in the proper range (you may use the mod function to do this).

You may need to convert your resulting vector from Cartesian coordinates to polar coordinates to find the angle. You may use the atan() function in MATLAB to do this. Note that the the convention we're using defines 0∘ to point in the direction of the positive y-axis and 90∘ to point in the direction of the positive x-axis (i.e., 0 degrees is north, 90 degrees is east).

A: 80deg
